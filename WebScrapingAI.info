Types of website scrapers:

Browser-Based: You can use AI to scrape website pages directly from your browser. These web scrapers operate from browsers like Chrome, Firefox, Edge, and Safari. Browser-based web scrapers run locally, which means your data stays with you for better data privacy, However, they operate from your local IP address and residential proxies, so they are better suited to non-intensive scraper operations. These tools also typically have the most user-friendly UI.

Cloud-Based: These scrapers operate from a separate cloud server, securing your local IP from getting blocked through IP rotation. They’re usually more expensive but provide a good option if you require high-volume scraping operations. Cloud-based web scraper AI tools are also available as downloadable local apps on your desktop.

Hybrid: If you can’t decide between browser or cloud-based web scraping tools, why not go for a hybrid scraper? These offer varied scraping features and are often considered the best screen scraping tools for flexibility.


Name:           Type:           Pricing:                Comments:
Bardeen AI      Browser         14 days trial           ...
Browse AI       Browser         50 credits monthly      bugging
AnyPicker       Browser         625 Rows monthly        not clear how to access the dashboard, almost got the data
Zyte            API             1 month free trial      AI "free trial" requires card info
Kadoa           Cloud & Browser 500 credits free        the simplest/easy/intuitive to work with I found until now but only the enterprise subscriptions allows for capturing the interactions with the website( which is needed because we need to click on the blue dot to show the sidepanel)
Thunderbit      Browser         free                    General AI browser automation (doesn't let me click and scroll the url)
Octoparser      Cloud & Browser Browser-free Cloud not  Many options to interact with the website after loading but fails to load...


General comment on traditional solution:
The HTML "View Page Source" is different from what you see in "Inspect Element" is because the page is likely dynamically rendered using JavaScript.
This means the content you're trying to scrape is loaded asynchronously after the initial page load,
and thus not present in the static HTML source code.

-------------------------------------------------------------------------------------------------------------------
Meeting outputs:
    - Esquecer os Browser based
    - Go for Kadoa


Opt1 Hybrid Python scrip with API AI webscraping:
    - Continuar a explorar os Cloud base AI webscrapers
        - Elaborar um script que chame o API dos AI webscrapers com o resultado
        - Enviar o resultado por msg em telegram

Opt2 Full Python script:
    - Selenium Script for URL Check, Telegram bot msg and Email msg:
    https://chatgpt.com/share/66ffd7ea-8690-8001-9b42-63d4aac96fc2